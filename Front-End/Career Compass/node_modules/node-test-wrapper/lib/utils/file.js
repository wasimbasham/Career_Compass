"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sanitizeTemplateDestination = exports.jsExtensionPath = exports.fileAvailable = exports.copyTemplate = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _shelljs = _interopRequireDefault(require("shelljs"));

var _isInvalidPath = _interopRequireDefault(require("is-invalid-path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * Append a '.js' extension to the supplied file path if it does not have one.
 * If it has a '.js' extension it is returned unaltered. If it ends with '.',
 * 'js' is appended. Otherwise, '.js' is appended.
 *
 * @param filePath
 * @returns {string}
 */
var jsExtensionPath = function jsExtensionPath(filePath) {
  return filePath.endsWith('.js') ? filePath : filePath + (filePath.endsWith('.') ? 'js' : '.js');
};
/**
 * Check if the supplied file path is available i.e. does not exist.
 * Returns true or a string describing why the file path cannot be
 * used.
 *
 * @param filePath
 * @returns {(boolean|string)}
 */


exports.jsExtensionPath = jsExtensionPath;

var fileAvailable = function fileAvailable(filePath) {
  if ((0, _isInvalidPath["default"])(filePath) || filePath.endsWith('/') || filePath.endsWith('\\')) {
    return "'".concat(filePath, "' is not a valid file path");
  }

  if (filePath.startsWith('/') || filePath.startsWith('\\')) {
    return 'Specify a relative file path';
  }

  var jsPath = jsExtensionPath(filePath);

  if (_fs["default"].existsSync(jsPath)) {
    var stats = _fs["default"].statSync(jsPath);

    return stats.isDirectory() ? "'".concat(jsPath, "' is a directory") : "File '".concat(jsPath, "' already exists");
  }

  return true;
};
/**
 * Given a destination path create the parent directories if they do
 * not exist.
 *
 * @param destination
 */


exports.fileAvailable = fileAvailable;

var sanitizeTemplateDestination = function sanitizeTemplateDestination(destination) {
  var parts = destination.split('/');
  parts.pop();

  if (parts.length) {
    var directory = parts.join('/');

    _shelljs["default"].mkdir('-p', directory);
  }
};
/**
 * Copy the correct supertest wrapper template based on the options specified
 * by the user.
 *
 * @param options
 */


exports.sanitizeTemplateDestination = sanitizeTemplateDestination;

var copyTemplate = function copyTemplate(options) {
  var esVersion = options.esVersion,
      authOpt = options.authOpt,
      filePath = options.filePath;
  var source = "".concat(__dirname, "/../assets/").concat(esVersion, "/").concat(authOpt, ".js");
  var destination = jsExtensionPath(filePath);
  sanitizeTemplateDestination(destination);

  _fs["default"].copyFileSync(source, destination);
};

exports.copyTemplate = copyTemplate;